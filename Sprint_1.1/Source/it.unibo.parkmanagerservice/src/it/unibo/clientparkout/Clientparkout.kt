/* Generated by AN DISI Unibo */ 
package it.unibo.clientparkout

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Clientparkout ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "initState"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var TOKENID = ""  
		return { //this:ActionBasciFsm
				state("initState") { //this:State
					action { //it:State
						println("Enter initState")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("Enter wait")
					}
					 transition(edgeName="t04",targetState="send_pickup_int_state",cond=whenRequest("pickup_ext"))
					transition(edgeName="t05",targetState="send_pickupok_ext_state",cond=whenReply("pickupok_int"))
				}	 
				state("send_pickup_int_state") { //this:State
					action { //it:State
						println("Enter send_pickup_int_state")
						if( checkMsgContent( Term.createTerm("pickup_ext(TOKENID)"), Term.createTerm("pickup_ext(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												TOKENID = payloadArg(0) 
												
						}
						request("pickup_int", "TOKENID" ,"statusactor" )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("send_pickupok_ext_state") { //this:State
					action { //it:State
						println("Enter send_pickupok_ext_state")
						answer("pickup_ext", "pickupok_ext", "X"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
