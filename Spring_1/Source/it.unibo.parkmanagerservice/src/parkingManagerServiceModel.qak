/*
 * parkingManagerServiceModel.qak
 * ------------------------------------------------------------------
 * 
 */

System parkingmanagerservice
 
// Context : ctxclientguiparkin
// Entity (GUI) :  clientguiparkin

// clientguiparkin -> clientparkin
Request  carrequest_ext : carrequest_ext(X)

// clientparkin -> clientguiparkin
Reply    informin_ext    : informin_ext(SLOTNUM)


// clientparkin -> status
Request  carrequest_int : carrequest_int(X)

// status -> clientparkin
Reply    informin_int    : informin_int(SLOTNUM)


// clientguiparkin -> clientparkin
Request  carenter_ext : carenter_ext(X)

// clientparkin -> clientguiparkin
Reply    receipt_ext    : receipt_ext(TOKENID)


// clientparkin -> status
Request  carenter_int : carenter_int(X)

// status -> clientparkin
Reply    receipt_int    : receipt_int(TOKENID)



// clientguiparkout -> clientparkout
Request  pickup_ext : pickup_ext(TOKENID)

// clientparkout -> clientguiparkout
Reply    pickupok_ext    : pickupok_ext(X)

// clientparkout -> status
Request  pickup_int : pickup_int(TOKENID)

// status -> clientparkout
Reply    pickupok_int    : pickupok_int(X)




Dispatch carrequest : carrequest(X)
Dispatch carenter : carenter(X)

Dispatch carrequestresponse : carrequestresponse(X)
Dispatch carenterresponse : carenterresponse(X)

Request  carenterreq : carenterreq(SLOTNUM)
Reply    receipt    : receipt(TOKENID)


// Context : ctxclientguiparkout
// Entity (GUI):  clientguiparkout
Request pickup : pickup(TOKENID)
Reply   pickupok    : pickupok(SLOTNUM)


// Context : ctxcommand
// Actor :  statusActor
Request ready : ready(P,D)
Reply   aknready    : aknready(AKN)

// Actor :  plannerActor
Request plan : plan(PLAN)
Reply   aknplan    : aknplan(AKN)

// Actor :  routeActor
Request route : route(ROUTE)
Reply   aknroute    : aknroute(AKN)

// Actor :  driverActor
Request op : op(OP)
Reply   aknop    : aknop(AKN)

// Context : ctxservergui
// Entity (GUI):  ctxservergui
Request commandToSim : commandToSim(X)
Reply   akncommandToSim    : akncommandToSim(AKN)

// Context : ctxsim
// Actor   : simactor
Request simtostatus : simtostatus(X)
Reply   aknsimtostatus    : aknsimtostatus(AKN)

Request simtodriver : simtodriver(X)
Reply   aknsimtodriver    : aknsimtodriver(AKN)

Dispatch simtowenv : simtowenv(X)

// Context : ctxsimgui
// Entity (GUI):  simgui
Request simaction : simaction(X)
Reply   aknsimaction    : aknsimaction(AKN)



Context ctxclientguiparkin ip[host="localhost\\\\clientguiparkin" port=10100]
Context ctxclientguiparkout ip[host="localhost\\\\ctxclientguiparkout" port=10200]

Context ctxclientparkin ip[host="localhost" port=10101]
Context ctxclientparkout ip[host="localhost" port=10201]

Context ctxcommand ip[host="localhost" port=10300]

Context ctxservergui ip[host="localhost" port=10400]
Context ctxserver ip[host="localhost" port=10401]

Context ctxsimgui ip[host="localhost" port=10500]
Context ctxsim ip[host="localhost" port=10501]



ExternalQActor clientguiparkin context ctxclientguiparkin 
ExternalQActor clientguiparkout context ctxclientguiparkout 
ExternalQActor servergui context ctxservergui 


QActor clientparkin context ctxclientparkin {
	[#  var SLOTNUM = 0 
		var TOKENID = ""
		
	#]
	//-------------------------------------------------------------------------
	State initstate initial {
		println("Enter initstate")

	}
	Goto waitfromcarrequest
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State waitfromcarrequest {
		println("Enter waitfromcarrequest")
		
	}
	Transition t0
	    // Request from ClientGUI 
		whenRequest carrequest_ext -> send_carrequest_int_state
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State send_carrequest_int_state {
		println("Enter send_carrequest_in_state")
		
		request statusactor -m carrequest_int : carrequest_int(X)
	}
	Goto waitforinform_int_state
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State waitforinform_int_state {
		println("Enter waitforinform_in_state")
	}
	Transition t0
		whenReply informin_int ->  send_informin_ext_state
	
	//-------------------------------------------------------------------------
	
	//-------------------------------------------------------------------------
	State send_informin_ext_state {
		println("Enter send_informin_ext_state")
		onMsg(informin_int : informin_int(X))
		{   
			[# SLOTNUM = payloadArg(0).toInt() #]			
		}
		
        replyTo carrequest_ext with informin_ext:SLOTNUM
	}
	Transition t0
		whenMsg carenter ->  watiforcarenterstate
		
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State watiforcarenterstate {
		println("Enter watiforcarenterstate")
		
		
	}
	Transition t0
		whenRequest carenter_ext -> send_carenter_int_state
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State send_carenter_int_state {
		println("Enter send_carenter_itn_state")
		
		request statusactor -m carenter_int : carenter_int(X)
	}
	Goto waitforreceipt_int_state
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State waitforreceipt_int_state {
		println("Enter waitforreceipt_in_state")
	}
	Transition t0
		whenReply receipt_int ->  send_carenter_ext_state
	
	//-------------------------------------------------------------------------
	
	//-------------------------------------------------------------------------
	State send_carenter_ext_state {
		println("Enter send_carenter_ext_state")
		onMsg(receipt_int : receipt_int(X))
		{   
			[# TOKENID = payloadArg(0) #]			
		}
		
        replyTo carenter_ext with receipt_ext:TOKENID
	}
	Transition t0
		whenMsg carenter ->  watiforcarenterstate
		
	//-------------------------------------------------------------------------
	

}




QActor clientparkout context ctxclientparkout {
	[# var TOKENID = "" #]
	State initState initial {
		println("Enter initState")

	}
	Goto wait

	State wait{
		println("Enter wait")

	}
	Transition t0 
		whenRequest pickup_ext -> send_pickup_int_state
		whenReply pickupok_int -> send_pickupok_ext_state
		
		
	State send_pickup_int_state{
		println("Enter send_pickup_int_state")
		onMsg(pickup_ext:pickup_ext(TOKENID))
		{
			[#
				TOKENID = payloadArg(0) 
				
			#]
		}
		request  statusactor -m pickup_int:TOKENID
	}
	Goto wait
	
	
	State send_pickupok_ext_state{
		println("Enter send_pickupok_ext_state")
		replyTo pickup_ext with pickupok_ext:X
	}
	Goto wait
			
}


QActor statusactor context ctxcommand {
	
	[#
		var SlotFreeList = mutableListOf("zero","free", "free", "free", "free", "free", "free")
		var IndoorArea = "OFF"
		var SequenceNumber = 0
		val ParkInQueue: Queue<String> = LinkedList<String>()
        val ParkOutQueue: Queue<Person> = LinkedList<Person>()
		
	#]
	
	State initState initial {
		println("Enter initState")

	}
	Goto wait
	
	State wait{
		
	}
	Transition t0
		whenRequest carrequest_int -> carrequest_int_state
		whenRequest carenter_int -> carenter_int_state
		whenRequest pickup_int -> pickup_int_state
	
	
	State carrequest_int_state
	{
		[#
			var SLOTNUM = 0
			if (IndoorArea == "OFF")
				SLOTNUM =  SlotFreeList.indexOfFirst{ it == "free"}
			else
				SLOTNUM = -2
		#]
		replyTo carrequest_int with informin_int:$SLOTNUM
	}
	Goto wait	
	
	State carenter_int_state
	{
		onMsg(carenter_int : carenter_int(SLOTNUM))
		{			
			[#
				var SLOTNUM = = payloadArg(0)
				SequenceNumber++
				var TOKENID = "$SequenceNumber-$SLOTNUM"
				SlotFreeList[SLOTNUM] = "movingIn"
				ParkInQueue.add(TOKENID)			
				// Check is PLAN is ready : only if trolley in HOME
					
			#]
		}
		
		replyTo carenter_int with receipt_int:$TOKENID
	}
	Goto wait	
	
	State pickup_int_state
	{
		onMsg(pickup_int : pickup_int(TOKENID))
		{			
			[#
				var index =  SlotFreeList.indexOfFirst{ it == $TOKENID}
				if (index > 0) 
				{
					ParkOutQueue.add(TOKENID)
				}
				else
				{
					//
				}
				// Check is PLAN is ready : only if trolley in HOME			
			#]
		}
		
		replyTo carenter_int with receipt_int:$TOKENID
	}
	Goto wait	
		
		
}

QActor planneractor context ctxcommand {
	State initState initial {
		println("Enter initState")

	}
}




QActor routeractor context ctxcommand {
	State initState initial {
		println("Enter initState")

	}
}

QActor driveractor context ctxcommand {
	State initState initial {
		println("Enter initState")

	}
}

 