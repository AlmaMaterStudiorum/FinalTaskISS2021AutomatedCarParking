/*
 * parkingArea.qak
 * ------------------------------------------------------------------
 * 
 * ASSUMPTIONS:
 *	- INDOOR  : cell (6,0)
 *  - OUTDOOR : cell (6,4)
 *  - One free parking slot : cell(3,2)	SLOTNUM=5
 *  - One client at a time
 *  - No sensors and fan
 *  - Temperature over TMAX (the trolley can be stopped)
 *	- The token corresponds to the parking slot number
 *  - The client who picks up a car waits until the trolley transports his/her car to the OUTDOOR
 *  - The parking manager is already logged in
 */

System parkingmanagerservice
 
// Context : ctxclientguiparkin
// Entity (GUI) :  clientguiparkin

// clientguiparkin -> clientparkin
Request  carrequest_ext : carrequest_ext(X)

// clientparkin -> clientguiparkin
Reply    informin_ext    : informin_ext(SLOTNUM)


// clientparkin -> status
Request  carrequest_in : carrequest_in(X)

// status -> clientparkin
Reply    informin_in    : informin_in(TOKENID)



Dispatch carrequest : carrequest(X)
Dispatch carenter : carenter(X)

Dispatch carrequestresponse : carrequestresponse(X)
Dispatch carenterresponse : carenterresponse(X)

Request  carenterreq : carenterreq(SLOTNUM)
Reply    receipt    : receipt(TOKENID)


// Context : ctxclientguiparkout
// Entity (GUI):  clientguiparkout
Request pickup : pickup(TOKENID)
Reply   pickupok    : pickupok(SLOTNUM)


// Context : ctxcommand
// Actor :  statusActor
Request ready : ready(P,D)
Reply   aknready    : aknready(AKN)

// Actor :  plannerActor
Request plan : plan(PLAN)
Reply   aknplan    : aknplan(AKN)

// Actor :  routeActor
Request route : route(ROUTE)
Reply   aknroute    : aknroute(AKN)

// Actor :  driverActor
Request op : op(OP)
Reply   aknop    : aknop(AKN)

// Context : ctxservergui
// Entity (GUI):  ctxservergui
Request commandToSim : commandToSim(X)
Reply   akncommandToSim    : akncommandToSim(AKN)

// Context : ctxsim
// Actor   : simactor
Request simtostatus : simtostatus(X)
Reply   aknsimtostatus    : aknsimtostatus(AKN)

Request simtodriver : simtodriver(X)
Reply   aknsimtodriver    : aknsimtodriver(AKN)

Dispatch simtowenv : simtowenv(X)

// Context : ctxsimgui
// Entity (GUI):  simgui
Request simaction : simaction(X)
Reply   aknsimaction    : aknsimaction(AKN)



Context ctxclientguiparkin ip[host="localhost\\\\clientguiparkin" port=10100]
Context ctxclientguiparkout ip[host="localhost\\\\ctxclientguiparkout" port=10200]

Context ctxclientparkin ip[host="localhost" port=10101]
Context ctxclientparkout ip[host="localhost" port=10201]

Context ctxcommand ip[host="localhost" port=10300]

Context ctxservergui ip[host="localhost" port=10400]
Context ctxserver ip[host="localhost" port=10401]

Context ctxsimgui ip[host="localhost" port=10500]
Context ctxsim ip[host="localhost" port=10501]



ExternalQActor clientguiparkin context ctxclientguiparkin 
ExternalQActor clientguiparkout context ctxclientguiparkout 
ExternalQActor servergui context ctxservergui 


QActor clientparkin context ctxclientparkin {
	[# var SLOTNUM = 0 #]
	//-------------------------------------------------------------------------
	State initstate initial {
		println("Enter initstate")

	}
	Goto waitfromclientguistate
	//-------------------------------------------------------------------------
	
	
	
	//-------------------------------------------------------------------------
	State waitfromclientguistate {
		println("Enter waitfromclientguistate")

	}
	Transition t0
	    // Request from ClientGUI 
		whenRequest carrequest_ext -> carrequeststate
	//-------------------------------------------------------------------------
	
	
	
	//-------------------------------------------------------------------------
	State carrequeststate {
		println("Enter carrequeststate")
		
		request statusactor -m carrequest_in : carrequest_in(X)
	}
	Goto waitforinforminstate
	//-------------------------------------------------------------------------
	
	
	//-------------------------------------------------------------------------
	State waitforinforminstate {
		println("Enter waitforinforminstate")
	}
	Transition t0
		whenReply informin_in ->  waitforcarenter
	
	//-------------------------------------------------------------------------
	
	//-------------------------------------------------------------------------
	State waitforcarenter {
		println("Enter waitforcarenter")
        ReplayTo clientguiparkin -m carrequest_in : carrequest_in(X)
	}
	Transition t0
		whenMsg carenter ->  carenterstate
		
	//-------------------------------------------------------------------------
	
	
	
	//-------------------------------------------------------------------------
	State carenterstate {
		println("Enter carenterstate")
		
		request statusactor -m carenterreq : carenterreq(SLOTNUM)
	}
	Goto waitforreceipt
	//-------------------------------------------------------------------------
	
	
	//-------------------------------------------------------------------------
	State waitforreceipt {
		println("Enter waitforreceipt")
        
	}
	Transition t0
		whenReply receipt ->  receiptstate
		
	//-------------------------------------------------------------------------
	
	
	//-------------------------------------------------------------------------
	State receiptstate {
		println("Enter receiptstate")
		
		forward clientguiparkin -m carenterresponse : carenterresponse(X)
	}
	Goto waitfromclientguistate
	//-------------------------------------------------------------------------
	
<<<<<<< HEAD
	
=======
>>>>>>> af09b0e18824afe27c3b10302383b32993892f66
}

QActor statusactor context ctxcommand {
		State initState initial {
		println("Enter initState")

	}
}


 