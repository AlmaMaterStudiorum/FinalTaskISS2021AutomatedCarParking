/* Generated by AN DISI Unibo */ 
package it.unibo.statusactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Statusactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "initState"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var SlotFreeList = mutableListOf("zero","free", "free", "free", "free", "free", "free")
				var IndoorArea = "OFF"
				var SequenceNumber = 0
				val ParkInQueue: Queue<String> = LinkedList<String>()
		        val ParkOutQueue: Queue<Person> = LinkedList<Person>()
				
		return { //this:ActionBasciFsm
				state("initState") { //this:State
					action { //it:State
						println("Enter initState")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
					}
					 transition(edgeName="t08",targetState="carrequest_int_state",cond=whenRequest("carrequest_int"))
					transition(edgeName="t09",targetState="carenter_int_state",cond=whenRequest("carenter_int"))
					transition(edgeName="t010",targetState="pickup_int_state",cond=whenRequest("pickup_int"))
				}	 
				state("carrequest_int_state") { //this:State
					action { //it:State
						
									var SLOTNUM = 0
									if (IndoorArea == "OFF")
										SLOTNUM =  SlotFreeList.indexOfFirst{ it == "free"}
									else
										SLOTNUM = -2
						answer("carrequest_int", "informin_int", "$SLOTNUM"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("carenter_int_state") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("carenter_int(X)"), Term.createTerm("carenter_int(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var SLOTNUM = = payloadArg(0)
												SequenceNumber++
												var TOKENID = "$SequenceNumber-$SLOTNUM"
												SlotFreeList[SLOTNUM] = "movingIn"
												ParkInQueue.add(TOKENID)			
												// Check is PLAN is ready : only if trolley in HOME
													
						}
						answer("carenter_int", "receipt_int", "$TOKENID"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("pickup_int_state") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickup_int(TOKENID)"), Term.createTerm("pickup_int(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var index =  SlotFreeList.indexOfFirst{ it == $TOKENID}
												if (index > 0) 
												{
													ParkOutQueue.add(TOKENID)
												}
												else
												{
													//
												}
												// Check is PLAN is ready : only if trolley in HOME			
						}
						answer("carenter_int", "receipt_int", "$TOKENID"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
