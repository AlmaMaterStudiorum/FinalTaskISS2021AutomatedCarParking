/* Generated by AN DISI Unibo */ 
package it.unibo.parkmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "initState"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val ACTORNAME = "parkmanagerservice"
				var CARREQUESTSLOT = 0
				var SlotFreeList = mutableListOf("zero","free", "free", "free", "free", "free", "free")
				var IndoorArea = "OFF"
				var SequenceNumber = 0
				val ParkInQueue: java.util.Queue<String> = java.util.LinkedList<String>()
		        val ParkOutQueue: java.util.Queue<String> = java.util.LinkedList<String>() 
		        var Fan = "OFF"
		        var Alarm = "OFF"
		        var Trolley = "idle" // idle,working,stopped		
		return { //this:ActionBasciFsm
				state("initState") { //this:State
					action { //it:State
						println("Enter initState")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("$ACTORNAME : Enter wait")
					}
					 transition(edgeName="t02",targetState="handle_carrequest_state",cond=whenRequest("carrequest"))
					transition(edgeName="t03",targetState="handle_parkrequest_state",cond=whenRequest("parkrequest"))
				}	 
				state("handle_carrequest_state") { //this:State
					action { //it:State
						println("$ACTORNAME : Enter handle_carrequest_state")
						
									CARREQUESTSLOT = 0
									if (IndoorArea === "OFF")
									    // if no slot are free SLOTNUM = -1
									    // SLOTNUM = 0 is impossibile
						 				CARREQUESTSLOT =  SlotFreeList.indexOfFirst{ it == "free"}
									else
										CARREQUESTSLOT = -2
						answer("carrequest", "informin", "$CARREQUESTSLOT"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handle_parkrequest_state") { //this:State
					action { //it:State
						println("$ACTORNAME : Enter handle_carrequest_state")
						
									SequenceNumber++
									var TOKENID = "$SequenceNumber-$CARREQUESTSLOT"
									SlotFreeList[CARREQUESTSLOT] = "movingIn"
									ParkInQueue.add(TOKENID)	
									
									// indoor area mock-object		
									IndoorArea = "ON"
									
									// Send Tasks To Trolley
									//[moveToIn,MoveToSlotIn,CARREQUESTSLOT]
						answer("parkrequest", "receipt", "$CARREQUESTSLOT"   )  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
