/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "initState"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var TASKONE = ""
				var TASKTWO = ""
				var SLOTNUM = 0
				var LASTSTATE = ""
				var REQUIREMENTSTATE = "idle" // idle,working,stopped
				val taskended = false
				
		return { //this:ActionBasciFsm
				state("initState") { //this:State
					action { //it:State
						println("Enter initState")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						 REQUIREMENTSTATE ="idle"   
					}
					 transition(edgeName="t04",targetState="working",cond=whenDispatch("tasks"))
				}	 
				state("working") { //this:State
					action { //it:State
						 REQUIREMENTSTATE ="working"   
						if( checkMsgContent( Term.createTerm("tasks(TASKONE,TASKTWO,SLOTNUM)"), Term.createTerm("tasks(TASKONE,TASKTWO,SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												TASKONE = payloadArg(0).toString() 
												TASKTWO = payloadArg(1).toString() 
												SLOTNUM = payloadArg(2).toInt() 
												
												// Ottieni da planner tutte le sequenze doPlan() per taskone -> taskoneList
												// Ottieni da planner tutte le sequenze doPlan() per tasktwo -> tasktwoList
												
						}
					}
					 transition( edgeName="goto",targetState="workingtaskone", cond=doswitch() )
				}	 
				state("workingtaskone") { //this:State
					action { //it:State
						 
									// Esegui una azione alla volta
									// se non ci sono altre azioni allora taskended = true
									 
					}
					 transition( edgeName="goto",targetState="waitworkingtaskone", cond=doswitchGuarded({ taskended == false  
					}) )
					transition( edgeName="goto",targetState="workingtasktwo", cond=doswitchGuarded({! ( taskended == false  
					) }) )
				}	 
				state("waitworkingtaskone") { //this:State
					action { //it:State
					}
					 transition(edgeName="t05",targetState="stoppedwaitworkingtaskone",cond=whenDispatch("stoptrolley"))
					transition(edgeName="t06",targetState="workingtaskone",cond=whenReply("stepdone"))
				}	 
				state("stoppedwaitworkingtaskone") { //this:State
					action { //it:State
						 REQUIREMENTSTATE ="working"   
					}
					 transition(edgeName="t07",targetState="waitworkingtaskone",cond=whenDispatch("resumetrolley"))
					transition(edgeName="t08",targetState="stoppedandstepdonewaitworkingtaskone",cond=whenReply("stepdone"))
				}	 
				state("stoppedandstepdonewaitworkingtaskone") { //this:State
					action { //it:State
					}
					 transition(edgeName="t09",targetState="workingtaskone",cond=whenDispatch("resumetrolley"))
				}	 
				state("workingtasktwo") { //this:State
					action { //it:State
						 
									// Esegui una azione alla volta
									// var taskended = false
					}
					 transition( edgeName="goto",targetState="waitworkingtasktwo", cond=doswitchGuarded({ taskended == false  
					}) )
					transition( edgeName="goto",targetState="endtasktwo", cond=doswitchGuarded({! ( taskended == false  
					) }) )
				}	 
				state("waitworkingtasktwo") { //this:State
					action { //it:State
					}
					 transition(edgeName="t010",targetState="stoppedwaitworkingtasktwo",cond=whenDispatch("stoptrolley"))
					transition(edgeName="t011",targetState="workingtaskone",cond=whenReply("stepdone"))
				}	 
				state("stoppedwaitworkingtasktwo") { //this:State
					action { //it:State
						 REQUIREMENTSTATE ="working"   
					}
					 transition(edgeName="t012",targetState="waitworkingtaskone",cond=whenDispatch("resumetrolley"))
					transition(edgeName="t013",targetState="stoppedandstepdonewaitworkingtasktwo",cond=whenReply("stepdone"))
				}	 
				state("stoppedandstepdonewaitworkingtasktwo") { //this:State
					action { //it:State
					}
					 transition(edgeName="t014",targetState="workingtasktwo",cond=whenDispatch("resumetrolley"))
				}	 
				state("endtasktwo") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
