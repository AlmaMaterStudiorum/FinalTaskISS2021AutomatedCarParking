/*
 * parkingManagerServiceModel.qak
 * ------------------------------------------------------------------
 * 
 */

System parkingmanagerservice
 
 
// Context : ctxclientguiparkin
// Entity (GUI) :  clientguiparkin

// clientguiparkin -> clientparkin
Request  carrequest_ext : carrequest_ext(X)

// clientparkin -> clientguiparkin
Reply    informin_ext    : informin_ext(SLOTNUM)


// clientparkin -> status
Request  carrequest_int : carrequest_int(X)

// status -> clientparkin
Reply    informin_int    : informin_int(SLOTNUM)


// clientguiparkin -> clientparkin
Request  carenter_ext : carenter_ext(X)

// clientparkin -> clientguiparkin
Reply    receipt_ext    : receipt_ext(TOKENID)


// clientparkin -> status
Request  carenter_int : carenter_int(X)

// status -> clientparkin
Reply    receipt_int    : receipt_int(TOKENID)


// Entity (GUI) :  clientguiparkout

// Context : ctxclientguiparkout
// clientguiparkout -> clientparkout
Request  pickup_ext : pickup_ext(TOKENID)

// clientparkout -> clientguiparkout
Reply    pickupok_ext    : pickupok_ext(X)

// clientparkout -> status
Request  pickup_int : pickup_int(TOKENID)

// status -> clientparkout
Reply    pickupok_int    : pickupok_int(X)


Dispatch start : start(DEVICE) // DEVICE : Trolley,Fan,Alarm 
Dispatch stop : stop(DEVICE)   // DEVICE : Trolley,Fan,Alarm
Dispatch simready : simready(PDO,SDO,TDO)   // PDO : current_Position-Direction-Operation
											// SDO : Source_position-Direction-Operation
											// TDO : Target_Position-Direction-Operation
Dispatch move: move(PDO)
Dispatch slotstatus : slotstatus(SLOTS)

Dispatch info : info(CONTENT) // Ex: simactor send statusactor a message that outdoor area is free/occupated

Request ready : ready(PDO,SDO,TDO)
Reply   akn_ready    : akn_ready(X)

Request plan : plan(PLANSTRING)
Reply   akn_plan    : akn_plan(X)

Request route : route(ROUTESTRING)
Reply   akn_route    : akn_route(X)

Request dmove : dmove(PDO)
Reply   akn_dmove    : akn_dmove(X)

Dispatch simaction : simaction(PDO,SDO,TDO)

//Dispatch simresult : simresult(SIMRESULTCONTENT)


// Context
Context ctxclientguiparkin ip[host="localhost\\\\clientguiparkin" port=10100]
Context ctxclientguiparkout ip[host="localhost\\\\ctxclientguiparkout" port=10200]

Context ctxclientparkin ip[host="localhost" port=10101]
Context ctxclientparkout ip[host="localhost" port=10201]

Context ctxcommand ip[host="localhost" port=10300]

Context ctxservergui ip[host="localhost" port=10400]
Context ctxserver ip[host="localhost" port=10401]

Context ctxsimgui ip[host="localhost" port=10500]
Context ctxsim ip[host="localhost" port=10501]

Context ctxwenv ip[host="localhost" port=10600]


// Context
ExternalQActor clientguiparkin context ctxclientguiparkin 
ExternalQActor clientguiparkout context ctxclientguiparkout 
ExternalQActor servergui context ctxservergui 
ExternalQActor wenvgui context ctxwenv 


QActor clientparkin context ctxclientparkin {
	[#  var SLOTNUM = 0 
		var TOKENID = ""
		
	#]
	//-------------------------------------------------------------------------
	State initstate initial {
		println("Enter initstate")

	}
	Goto waitfromcarrequest_ext_state
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State waitfromcarrequest_ext_state {
		println("Enter waitfromcarrequest_ext_state")
		
	}
	Transition t0
	    // Request from ClientGUI 
		whenRequest carrequest_ext -> waitforinform_int_state
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State waitforinform_int_state {
		println("Enter waitforinform_int_state")
		
		request statusactor -m carrequest_int : carrequest_int(X)
	}
	Transition t0
		whenReply informin_int ->  waitforinform_int_state
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State watiforcarenter_ext_state {
		println("Enter watiforcarenter_ext_state")
		onMsg(informin_int : informin_int(X))
		{   
			[# SLOTNUM = payloadArg(0).toInt() #]			
		}
		replyTo carrequest_ext with informin_ext:SLOTNUM
	}
	Transition t0
		whenRequest carenter_ext -> waitforreceipt_int_state
	
	//-------------------------------------------------------------------------
	
	//-------------------------------------------------------------------------
	State waitforreceipt_int_state {
		println("Enter waitforreceipt_int_state")
		
       request statusactor -m carenter_int : carenter_int(X)
	}
	Transition t0
		whenReply receipt_int ->  complete_state
	
	//-------------------------------------------------------------------------
	
	//-------------------------------------------------------------------------
	State complete_state {
		println("Enter send_carenter_ext_state")
		onMsg(receipt_int : receipt_int(X))
		{   
			[# TOKENID = payloadArg(0) #]			
		}
		
        replyTo carenter_ext with receipt_ext:TOKENID
	}
	Goto waitfromcarrequest_ext_state
	//-------------------------------------------------------------------------
	
	
}

QActor clientparkintest context ctxclientparkin {
	[#  var SLOTNUM = 0 
		var TOKENID = ""
		
	#]
	//-------------------------------------------------------------------------
	State initstate initial {
		println("Enter initstate")

	}
	Goto waitforinform_ext_state
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State waitforinform_ext_state {
		println("Enter waitfromcarrequest_ext_state")
		
		request clientparkin -m carrequest_ext:X
	}
	Transition t0
	    // Request from ClientGUI 
		whenReply informin_ext ->  waitforreceipt_ext_state
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State waitforreceipt_ext_state {
		println("Enter waitforinform_ext_state")
		
		onMsg(informin_ext : informin_ext(SLOTNUM))
		{   
			[# SLOTNUM = payloadArg(0).toInt() #]			
		}
		
		request clientparkin -m carenter_ext:X
	}
	Transition t0
		whenReply receipt_ext ->  waitfor_download
	//-------------------------------------------------------------------------
		
	//-------------------------------------------------------------------------
	State waitfor_download {
		println("Enter watiforcarenter_ext_state")
		onMsg(informin_int : informin_int(TOKENID))
		{   
			[# TOKENID = payloadArg(0) #]			
		}
		// TBD event???
		
	}
		
}


QActor clientparkout context ctxclientparkout {
	[# var TOKENID = "" #]
	State initState initial {
		println("Enter initState")

	}
	Goto waitforpickup_ext

	State waitforpickup_ext{
		println("Enter wait")

	}
	Transition t0 
		whenRequest pickup_ext -> waitforpickup_int_state
		
				
	State waitforpickup_int_state{
		println("Enter waitforpickup_int_state")
		onMsg(pickup_ext:pickup_ext(TOKENID))
		{
			[#
				TOKENID = payloadArg(0) 
				
			#]
		}
		request  statusactor -m pickup_int:TOKENID
	}
	Transition t0 
		whenReply pickupok_int -> complete_state
	
	
	State complete_state{
		println("Enter send_pickupok_ext_state")
		replyTo pickup_ext with pickupok_ext:X
	}
	Goto waitforpickup_ext
			
}

QActor clientparkouttest context ctxclientparkout {
	[# var TOKENID = "" #]
	State initState initial {
		println("Enter initState")

	}
	Goto waitforpickupok_ext

	State waitforpickupok_ext{
		println("Enter wait")
		request  clientparkout -m pickup_ext:TOKENID
	}
	Transition t0 
		whenReply pickupok_ext -> waitfor_upload
		
				
	State waitfor_upload{
		println("Enter waitfor_upload")
		// TBD event???

	}
			
}


QActor statusactor context ctxcommand {
	
	[#
		var SlotFreeList = mutableListOf("zero","free", "free", "free", "free", "free", "free")
		var IndoorArea = "OFF"
		var SequenceNumber = 0
		val ParkInQueue: java.util.Queue<String> = java.util.LinkedList<String>()
        val ParkOutQueue: java.util.Queue<String> = java.util.LinkedList<String>() 
        var Fan = "OFF"
        var Alarm = "OFF"
        var Trolley = "idle" // idle,working,stopped		
	#]
	
	State initState initial {
		println("Enter initState")

	}
	Goto wait
	
	State wait
	{
		println("Enter wait")	
	}
	Transition t0
		whenRequest carrequest_int -> carrequest_int_state
		whenRequest carenter_int -> carenter_int_state
		whenRequest pickup_int -> pickup_int_state
		whenMsg start -> start_state
		whenMsg stop -> stop_state
		whenMsg simready -> simready_state
		whenMsg move -> move_state
		whenReply akn_ready -> manage_akn_ready_state
	
	
	State carrequest_int_state
	{
		println("Enter carrequest_int_state")
		[#
			var SLOTNUM = 0
			if (IndoorArea === "OFF")
			    // if no slot are free SLOTNUM = -1
			    // SLOTNUM = 0 is impossibile
 				SLOTNUM =  SlotFreeList.indexOfFirst{ it == "free"}
			else
				SLOTNUM = -2
		#]
		replyTo carrequest_int with informin_int:$SLOTNUM
	}
	Goto wait	
	
	State carenter_int_state
	{
		println("Enter carenter_int_state")
		onMsg(carenter_int : carenter_int(SLOTNUM))
		{			
			[#
				var SLOTNUM = payloadArg(0).toInt()
				SequenceNumber++
				var TOKENID = "$SequenceNumber-$SLOTNUM"
				SlotFreeList[SLOTNUM] = "movingIn"
				ParkInQueue.add(TOKENID)			
				IndoorArea = "ON"
				// Check if PLAN is ready : for ex if trolley in HOME
					
			#]
		}
		
		replyTo carenter_int with receipt_int:TOKENID
	}
	Goto wait	
		
	State pickup_int_state
	{
		println("Enter pickup_int_state")
		onMsg(pickup_int : pickup_int(TOKENID))
		{			
			[#
				var TOKENID = payloadArg(0)
				var index =  SlotFreeList.indexOfFirst{ it == TOKENID}
				if (index > 0) 
				{
					ParkOutQueue.add(TOKENID)
				}
				else
				{
					//
				}
				// Check if PLAN is ready : for ex if trolley in HOME			
			#]
		}
		
		replyTo carenter_int with receipt_int:TOKENID
	}
	Goto wait	
			
	State start_state
	{
		println("Enter start_state")
		onMsg(start : start(DEVICE))
		{			
			[#
				val Action = "ON"
				var DEVICE = payloadArg(0)
				when(DEVICE)
				{
					"F" -> Fan = Action
					"A" -> Alarm = Action
					"T" -> Trolley = Action		
				}			
			#]
		}
		forward servergui -m start:DEVICE
		
	}	
	Goto wait	
	
	State stop_state
	{
		println("Enter stop_state")
		onMsg(start : start(DEVICE))
		{			
			[#
				val Action = "OFF"
				var DEVICE = payloadArg(0)
				when(DEVICE)
				{
					"F" -> Fan = Action
					"A" -> Alarm = Action
					"T" -> Trolley = Action		
				}				
			#]
		}
		forward servergui -m start:DEVICE
	}	
	Goto wait	
	
	State simready_state
	{
		println("Enter simready_state")
		onMsg(simready : simready(PDO,SDO,TDO))
		{			
			[#
				// reset inner variable e send ready to planner				
			#]
		}
		//forward planneractor -m ready:DEVICE
	}	
	Goto wait	
	
	State move_state
	{
		println("Enter move_state")
		// Manage avaliable state
		// TBD
		
	}	
	Goto wait	
	
	State manage_akn_ready_state
	{
		println("Enter manage_akn_ready_state")
	}	
	Goto wait
	

		
}

QActor planneractor context ctxcommand {
	State initState initial {
		println("Enter initState")

	}
	Goto wait
	
	State wait
	{
		println("Enter wait")
	}
	Transition t0
		whenRequest ready -> manage_state
		
	State manage_state
	{
		println("Enter manage_state")
		[#
		   var PLAN	= "O,An,U,O,D"
			
		#]
					
		request routeractor -m route:PLAN
	}	
	Transition t0
		whenReply akn_ready -> manage_akn_state
	
	State manage_akn_state
	{
		println("Enter manage_akn_state")
	}	
	Goto wait
	
}


QActor routeractor context ctxcommand {
	State initState initial {
		println("Enter initState")

	}
	Goto wait
		
	State wait
	{
		println("Enter wait")
	}
	Transition t0
		whenRequest plan -> manage_state
		
	State manage_state
	{
		println("Enter manage_state")
		[#
		   var ROUTE = ""	
			
		#]
					
		request driveractor -m route:ROUTE
	}	
	Transition t0
		whenReply akn_route -> manage_akn_state
	
	State manage_akn_state
	{
		println("Enter manage_akn_state")
	}	
	Goto wait
}

QActor driveractor context ctxcommand {

	State initState initial {
		println("Enter initState")

	}
	Goto wait
		
	State wait
	{
		println("Enter wait")
	}
	Transition t0
		whenRequest ready -> manage_state
		
	State manage_state
	{
		println("Enter manage_state")
		[#
		   var PDO = "0,0,S,N"
			
		#]
					
		request simactor -m dmove:PDO
	}	
	Transition t0
		whenReply akn_dmove -> manage_akn_state
	
	State manage_akn_state
	{
		println("Enter manage_akn_state")
	}	
	Goto wait
	
}

QActor simactor context ctxsim {
	State initState initial {
		println("Enter initState")

	}
	Goto wait
	
	State wait
	{
		
	}
	Transition t0
		whenMsg start -> manage_start
		whenMsg stop -> manage_stop
		whenMsg simaction -> manage_simaction
		whenRequest dmove -> dmove_state
	
	State manage_start
	{
		onMsg(start : start(DEVICE))
		{			
			forward statusactor -m start:DEVICE
		}
	}
	Goto wait
	
	State manage_stop
	{
		onMsg(stop : stop(DEVICE))
		{			
			forward statusactor -m stop:DEVICE
		}
	}
	Goto wait
	
	State manage_simaction
	{
		onMsg(simready : simready(PDO,SDO,TPO))
		{			
			forward statusactor -m simready:simready(PDO,SDO,TPO)
		}
	}
	Goto wait
	
	State dmove_state
	{
		onMsg(dmove : dmove(PDO))
		{			
			forward statusactor -m move:PDO
			replyTo dmove with akn_dmove:X
		}
	}
	Goto wait
	
}


 