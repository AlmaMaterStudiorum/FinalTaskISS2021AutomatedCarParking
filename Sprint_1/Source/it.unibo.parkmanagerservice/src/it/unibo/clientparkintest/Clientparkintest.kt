/* Generated by AN DISI Unibo */ 
package it.unibo.clientparkintest

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Clientparkintest ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "initstate"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		  var SLOTNUM = 0 
				var TOKENID = ""
				
		return { //this:ActionBasciFsm
				state("initstate") { //this:State
					action { //it:State
						println("Enter initstate")
					}
					 transition( edgeName="goto",targetState="waitforinform_ext_state", cond=doswitch() )
				}	 
				state("waitforinform_ext_state") { //this:State
					action { //it:State
						println("Enter waitfromcarrequest_ext_state")
						request("carrequest_ext", "X" ,"clientparkin" )  
					}
					 transition(edgeName="t04",targetState="waitforreceipt_ext_state",cond=whenReply("informin_ext"))
				}	 
				state("waitforreceipt_ext_state") { //this:State
					action { //it:State
						println("Enter waitforinform_ext_state")
						if( checkMsgContent( Term.createTerm("informin_ext(SLOTNUM)"), Term.createTerm("informin_ext(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0).toInt()  
						}
						request("carenter_ext", "X" ,"clientparkin" )  
					}
					 transition(edgeName="t05",targetState="waitfor_download",cond=whenReply("receipt_ext"))
				}	 
				state("waitfor_download") { //this:State
					action { //it:State
						println("Enter watiforcarenter_ext_state")
						if( checkMsgContent( Term.createTerm("informin_int(SLOTNUM)"), Term.createTerm("informin_int(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENID = payloadArg(0)  
						}
					}
				}	 
			}
		}
}
